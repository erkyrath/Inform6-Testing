Constant Story "PropStoreOptimTest";
Constant Headline "Not a game.^";

Release 1;

! This is a compiler unit test for optimizations.

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

Global failures;

[ Main loc;
    #Ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;
    #Endif; ! TARGET_

	loc = 0;

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #ifnot;
    print "Game file format ", 0->0, ".^";
    #Endif; ! TARGET_GLULX
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		failures++;
		print " (ERROR, should be ", val2, ")";
	}
];

[ RunTest;
	PropTest();
	PropPreExprTest();
	PropPostExprTest();

	AddrTest();
	AddrPreExprTest();
	AddrPostExprTest();
	
	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];

Global glob;
Array arr-->4;

Property prop1;
Property prop2;
Property prop3;

Object obj
  with prop1 11,
  with prop2 22,
  with prop3 33;

[ PropTest loc;
	loc = obj.prop1;
	print "loc: obj.prop1="; check_value(loc, 11); new_line;
	glob = obj.prop2;
	print "glob: obj.prop2="; check_value(glob, 22); new_line;
	arr-->0 = obj.prop3;
	print "arr-->0: obj.prop3="; check_value(arr-->0, 33); new_line;

	new_line;
];

[ PropPreExprTest loc;
	loc = 1 + obj.prop1;
	print "loc: 1+obj.prop1="; check_value(loc, 12); new_line;
	glob = 2 + obj.prop2;
	print "glob: 2+obj.prop2="; check_value(glob, 24); new_line;
	arr-->1 = 3 + obj.prop3;
	print "arr-->1: 3+obj.prop3="; check_value(arr-->1, 36); new_line;

	new_line;
];

[ PropPostExprTest loc;
	loc = obj.prop1 + 2;
	print "loc: obj.prop1+2="; check_value(loc, 13); new_line;
	glob = obj.prop2 + 3;
	print "glob: obj.prop2+3="; check_value(glob, 25); new_line;
	arr-->2 = obj.prop3 + 4;
	print "arr-->2: obj.prop3+4="; check_value(arr-->2, 37); new_line;

	new_line;
];


[ AddrTest loc;
	loc = obj.&prop1;
	print "loc: obj.&prop1="; check_value(loc-->0, 11); new_line;
	glob = obj.&prop2;
	print "glob: obj.&prop2="; check_value(glob-->0, 22); new_line;
	arr-->0 = obj.&prop3;
	print "arr-->0: obj.&prop3="; check_value((arr-->0)-->0, 33); new_line;

	new_line;
];

[ AddrPreExprTest loc;
	loc = 1 + obj.&prop1;
	print "loc: 1+obj.&prop1="; check_value((loc-1)-->0, 11); new_line;
	glob = 2 + obj.&prop2;
	print "glob: 2+obj.&prop2="; check_value((glob-2)-->0, 22); new_line;
	arr-->1 = 3 + obj.&prop3;
	print "arr-->1: 3+obj.&prop3="; check_value(((arr-->1)-3)-->0, 33); new_line;

	new_line;
];

[ AddrPostExprTest loc;
	loc = obj.&prop1 + 2;
	print "loc: obj.&prop1+2="; check_value((loc-2)-->0, 11); new_line;
	glob = obj.&prop2 + 3;
	print "glob: obj.&prop2+3="; check_value((glob-3)-->0, 22); new_line;
	arr-->2 = obj.&prop3 + 4;
	print "arr-->2: obj.&prop3+4="; check_value(((arr-->2)-4)-->0, 33); new_line;

	new_line;
];

