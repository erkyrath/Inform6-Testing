Constant Story "BranchCornerTest";
Constant Headline "Not a game.^";

Release 1;

! This is a compiler unit test for condensing branch opcodes.

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

Global failures;

[ Main loc;
    #Ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;
    #Endif; ! TARGET_

	loc = 0;

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #ifnot;
    print "Game file format ", 0->0, ".^";
    #Endif; ! TARGET_GLULX
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		failures++;
		print " (ERROR, should be ", val2, ")";
	}
];

Global glob;

[ RunTest val;
	val = jumpnext_false();
	print "jumpnext_false(): "; check_value(val, 0);
	print "; ";
	val = jumpnext_true();
	print "jumpnext_true(): "; check_value(val, 1);
	print "; ";
	val = jumpnext_two();
	print "jumpnext_two(): "; check_value(val, 2);
	print "^";

	val = multilabel_base(1);
	print "multilabel_base(1): "; check_value(val, 1);
	print "; ";
	val = multilabel_base(2);
	print "multilabel_base(2): "; check_value(val, 1);
	print "; ";
	val = multilabel_base(3);
	print "multilabel_base(3): "; check_value(val, 1);
	print "; ";
	val = multilabel_base(4);
	print "multilabel_base(4): "; check_value(val, 9);
	print "^";

	val = multilabel_with(1);
	print "multilabel_with(1): "; check_value(val, 1);
	print "; ";
	val = multilabel_with(2);
	print "multilabel_with(2): "; check_value(val, 1);
	print "; ";
	val = multilabel_with(3);
	print "multilabel_with(3): "; check_value(val, 1);
	print "; ";
	val = multilabel_with(4);
	print "multilabel_with(4): "; check_value(val, 1);
	print "^";

	val = prunebranch_base(0);
	print "prunebranch_base(0): "; check_value(val, 3);
	print "; ";
	val = prunebranch_base(1);
	print "prunebranch_base(1): "; check_value(val, 2);
	print "^";

	val = prunebranch_with(0);
	print "prunebranch_with(0): "; check_value(val, 3);
	print "; ";
	val = prunebranch_with(1);
	print "prunebranch_with(1): "; check_value(val, 2);
	print "^";

	val = endloop_false(0);
	print "endloop_false(0): "; check_value(val, 2);
	print " glob="; check_value(glob, 0);
	print "; ";
	val = endloop_false(1);
	print "endloop_false(1): "; check_value(val, 0);
	print " glob="; check_value(glob, 1);
	print "; ";
	val = endloop_false(4);
	print "endloop_false(4): "; check_value(val, 0);
	print " glob="; check_value(glob, 4);
	print "^";

	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];

[ jumpnext_false;
	jump LABEL;
	.LABEL;
	rfalse;
];

[ jumpnext_true;
	jump LABEL;
	.LABEL;
	rtrue;
];

[ jumpnext_two;
	jump LABEL;
	.LABEL;
	return 2;
];

[ multilabel_base val;
	if (val == 1)
		jump LABEL1;
	if (val == 2)
		jump LABEL2;
	if (val == 3)
		jump LABEL3;
	return 9;
	.LABEL1;
	.LABEL2;
	.LABEL3;
	rtrue;
];

[ multilabel_with val;
#ifdef TARGET_ZCODE;
	! The @verify opcode always branches but is not optimized.
	@verify ?LABEL2;
#ifnot;
	@jeq val val ?LABEL2;
#endif; ! TARGET_GLULX
	
	if (val == 1)
		jump LABEL1;
	if (val == 2)
		jump LABEL2;
	if (val == 3)
		jump LABEL3;
	return 9;
	.LABEL1;
	.LABEL2;
	.LABEL3;
	rtrue;
];

[ prunebranch_base val;
	if (val) {
		if (true) return 2;
		rtrue;
	}
	return 3;
];

! This should compile the same as prunebranch_base().
[ prunebranch_with val;
	if (val) {
		if (true) return 2;
		.LABEL;
		rtrue;
	}
	return 3;
];

[ endloop_false val;
	glob = 0;
	if (val) {
		while (val > 0) {
			val--;
			glob++;
		}
		rfalse;
	}
	return 2;
];

