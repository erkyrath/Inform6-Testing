Constant Story "UnaryOpErrorTest";
Constant Headline "Not a game.^";

Release 1;

! This is a compiler unit test for some unary op syntaxes that were causing compiler errors.

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

Global failures;

[ Main loc;
    #Ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;
    #Endif; ! TARGET_

	loc = 0;

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #ifnot;
    print "Game file format ", 0->0, ".^";
    #Endif; ! TARGET_GLULX
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		failures++;
		print " (ERROR, should be ", val2, ")";
	}
];

[ RunTest;
	GoodExprs();
	BadExprs();
	
	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];

Constant tilde = "@@126";
Constant dtilde = "@@126@@126";

[ GoodExprs val x;
	val = ~1;
	print (string) tilde, "1: "; check_value(val, -2); print "^";
	val = ~(2);
	print (string) tilde, "(2): "; check_value(val, -3); print "^";
	val = (~3);
	print "(", (string) tilde, "3): "; check_value(val, -4); print "^";
	val = ~3+1;
	print (string) tilde, "3+1: "; check_value(val, -3); print "^";
	val = (~4+1);
	print "(", (string) tilde, "4+1): "; check_value(val, -4); print "^";
	val = 1-~4;
	print "1-", (string) tilde, "4: "; check_value(val, 6); print "^";
	val = (1-~5);
	print "(1-", (string) tilde, "5): "; check_value(val, 7); print "^";
	new_line;

	val = ~~0;
	print (string) dtilde, "0: "; check_value(val, 1); print "^";
	val = ~~1;
	print (string) dtilde, "1: "; check_value(val, 0); print "^";
	val = ~~(2);
	print (string) dtilde, "(2): "; check_value(val, 0); print "^";
	val = (~~3);
	print "(", (string) dtilde, "3): "; check_value(val, 0); print "^";
	val = (1&&~~3);
	print "(1&&", (string) dtilde, "3): "; check_value(val, 0); print "^";
	val = (1||~~3);
	print "(1||", (string) dtilde, "3): "; check_value(val, 1); print "^";
	new_line;

	x = 3;
	val = x++;
	print "x++: x="; check_value(x, 4);
	print ", val="; check_value(val, 3); print "^";
	val = ++x;
	print "++x: x="; check_value(x, 5);
	print ", val="; check_value(val, 5); print "^";
	val = (1-++x);
	print "(1-++x): x="; check_value(x, 6);
	print ", val="; check_value(val, -5); print "^";
	val = 1+(++x);
	print "1+(++x): x="; check_value(x, 7);
	print ", val="; check_value(val, 8); print "^";
	val = (x++)-1;
	print "(x++)-1: x="; check_value(x, 8);
	print ", val="; check_value(val, 6); print "^";
	! TODO: (x++-1) currently throws a compiler error! x++-1 throws a non-compiler error.

	x = 3;
	val = ++x-1;
	print "++x-1: x="; check_value(x, 4);
	print ", val="; check_value(val, 3); print "^";
	val = (++x-1);
	print "(++x-1): x="; check_value(x, 5);
	print ", val="; check_value(val, 4); print "^";
	val = (++x)-1;
	print "(++x)-1: x="; check_value(x, 6);
	print ", val="; check_value(val, 5); print "^";
];



[ BadExprs val;
	val = 0;
	! Each of these expressions is an error, but not an internal compiler error.
	#ifdef BAD_EXPR_0;
	val = (1 2);
	#endif; ! BAD_EXPR_0

	#ifdef BAD_EXPR_1;
	val = 1 ~ 2;
	#endif; ! BAD_EXPR_1

	#ifdef BAD_EXPR_2;
	val = (1 ~ 2);
	#endif; ! BAD_EXPR_2

	#ifdef BAD_EXPR_3;
	val = (1) ~ 2;
	#endif; ! BAD_EXPR_3

	#ifdef BAD_EXPR_4;
	val = 1 ~ (2);
	#endif; ! BAD_EXPR_4
	
	#ifdef BAD_EXPR_5;
	val = ((1) ~ 2);
	#endif; ! BAD_EXPR_5

	#ifdef BAD_EXPR_6;
	val = (1 ~ (2));
	#endif; ! BAD_EXPR_6

	#ifdef BAD_EXPR_7;
	val = (1 ~~ 2);
	#endif; ! BAD_EXPR_7

	#ifdef BAD_EXPR_8;
	val = (1 -- 2);
	#endif; ! BAD_EXPR_8

	#ifdef BAD_EXPR_9;
	val = (1 ++ 2);
	#endif; ! BAD_EXPR_9

	#ifdef BAD_EXPR_10;
	val = ((1) -- 2);
	#endif; ! BAD_EXPR_10

	#ifdef BAD_EXPR_11;
	val = (1 ++ (2));
	#endif; ! BAD_EXPR_11

];

