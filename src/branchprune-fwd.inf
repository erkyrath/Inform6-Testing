Constant Story "BranchPruneFwdTest";
Constant Headline "Not a game.^";

Release 1;

! This is a compiler unit test for stripping dead branches from routines.

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

Global failures;

[ Main;
    #ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 0;
    #endif; ! TARGET_GLULX

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #Endif; ! TARGET_GLULX
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		failures++;
		print " (ERROR, should be ", val2, ")";
	}
];

[ RunTest;
	RunAllTests();

	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];

[ RunAllTests;
	print "TestFwdJumpIf(4): ";
	check_value(TestFwdJumpIf(4), 12);
	print ".^";
	print "TestFwdJumpIf(11): ";
	check_value(TestFwdJumpIf(11), 99);
	print ".^";

	print "TestFwdJumpFor(4): ";
	check_value(TestFwdJumpFor(4), 4);
	print ".^";
	print "TestFwdJumpFor(12): ";
	check_value(TestFwdJumpFor(12), 12);
	print ".^";

	print "TestFwdJumpFor2(4): ";
	check_value(TestFwdJumpFor2(4), 4);
	print ".^";
	print "TestFwdJumpFor2(12): ";
	check_value(TestFwdJumpFor2(12), 36);
	print ".^";

	print "TestFwdJumpFor3(4): ";
	check_value(TestFwdJumpFor3(4), 5);
	print ".^";
	print "TestFwdJumpFor3(14): ";
	check_value(TestFwdJumpFor3(14), 14);
	print ".^";
	print "TestFwdJumpFor3(24): ";
	check_value(TestFwdJumpFor3(24), 99);
	print ".^";
	print "TestFwdJumpFor3(25): ";
	check_value(TestFwdJumpFor3(25), 25);
	print ".^";
];

[ TestFwdJumpIf val;
	if (val < 10) jump FooA;
	
	if (0) {
		val++;
		return val;
		.FooA;
		val = val * 3;
		return val;
	}
	
	return 99;
];

[ TestFwdJumpFor val;
	if (val >= 10) jump FooA;
	
	for ( : false : ) {
		val = val * 3;   ! warning: not reached
		.FooA;
	}
	
	return val;
];

[ TestFwdJumpFor2 val;
	if (val >= 10) jump FooA;
	
	for ( : false : ) {
		.FooA;
		val = val * 3;
	}
	
	return val;
];

[ TestFwdJumpFor3 val;
	if (val >= 20) jump FooB;
	if (val >= 10) jump FooA;
	
	for (val++ : false : ) {
		.FooB;
		if (val % 3 == 0)
			return 99;
		.FooA;
	}
	
	return val;
];

