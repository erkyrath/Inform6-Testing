[ Main val;
	! We don't want to call the test funcs; they would just be a mess of runtime errors.
	val = testgive;
	val = testhas;
	val = testmove;
];

Attribute attr1;
Attribute attr2;

Property cprop;

Object obj
  with iprop1 [; ],
  with iprop2 0;

Global glob;

Array arr --> 3;

Constant zero 0;
Constant objconst obj;

[ func; ];

[ testgive loc;
	! All these statements are ok
	give obj attr1;
	give glob attr2;
	give loc attr1;
	give obj glob;
	give obj loc;
	give loc loc;

	! Literals do not produce a warning
	give obj 5;
	give obj 'word';
	give 'word' attr1;
	! Constants do not produce a warning
	give obj zero;
	give zero attr2;
	! Expressions do not produce a warning
	give obj (obj+1);
	give (arr+1) attr2;
	
	! Forward symbols do not produce a warning
	give obj objlate;
	give alate attr1;
	give obj cproplate;

	! Warnings: expected Attribute
	give obj cprop;
	give obj iprop1;
	give obj arr;
	give obj obj;
	give obj func;

	! This produces a warning in Glulx only
	give obj objconst;

	! Warnings: expected Object
	give cprop attr1;
	give iprop1 attr1;
	give arr attr1;
	give attr1 attr2;
	give func attr2;
];

[ testhas loc;
	loc = (obj has attr1);
	loc = (obj hasnt attr2);
	loc = (glob has attr1);
	loc = (loc has attr1);
	loc = (obj has glob);
	loc = (glob has loc);

	! Literals do not produce a warning
	loc = (obj has 5);
	! Constants do not produce a warning
	loc = (obj has zero);
	! Expressions do not produce a warning
	loc = (obj has arr+1);
	
	! Forward symbols do not produce a warning
	loc = (obj has objlate);
	loc = (alate has attr1);
	loc = (obj has cproplate);

	! Warnings: expected Attribute
	loc = (obj has obj);
	loc = (obj hasnt obj);
	loc = (obj has arr);
	loc = (obj hasnt arr);
	loc = (obj has cprop);
	loc = (obj has func);
	! iprop1 is beyond MAX_ATTRS and therefore produces an error

	! This produces a warning in Glulx only
	loc = (obj hasnt objconst);

	! Warnings: expected Object
	loc = (arr has attr1);
	loc = (arr hasnt attr1);
	loc = (attr1 has attr1);
	loc = (func has attr1);
	loc = (cprop hasnt attr1);
];

[ testmove loc;
	! No warnings
	move obj to glob;
	move loc to obj;
	move arr-->0 to obj.iprop1;
	move alate to funclate;
	move obj to 5;
	move obj to objconst;

	! Warnings: expected Object
	move func to obj;
	move obj to attr2;
	move arr to iprop1;

	! No warnings
	remove glob;
	remove loc;
	remove alate;
	remove 'dict';
	remove objconst;
	
	! Warnings: expected Object
	remove func;
	remove arr;
	remove attr1;
	remove cprop;
];

Object objlate;

Attribute alate;
Property cproplate;

[ funclate; ];
