Constant Story "SymbolicAbbrevTest";
Constant Headline "Not a game.^";

Release 1;

! This is a compiler unit test for the "@(SYMBOL)" abbreviation escape.

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

Global failures;

[ Main;
    #ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 0;
    #endif; ! TARGET_GLULX

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #Endif; ! TARGET_GLULX
];

Constant BIGBUFSIZE 256;
Array bigbuffer1 -> BIGBUFSIZE;
Array bigbuffer2 -> BIGBUFSIZE;

#Ifdef TARGET_ZCODE;

! Platform-independent way of printing strings and properties to a
! buffer (defined as length word followed by byte characters).

Array tempbuffer -> BIGBUFSIZE;

[ string_to_array str buf   len ix;
    @output_stream 3 tempbuffer;
    switch (metaclass(str)) {
      String:
        print (string) str;
      Routine:
        str();
    }
    @output_stream -3;
	len = (tempbuffer+0)-->0;
    if (len > BIGBUFSIZE-WORDSIZE) print "Error: Overflow in PrintToBuffer.^";
	for (ix=0 : ix<len : ix++)
		buf->ix = tempbuffer->(ix+WORDSIZE);
    return len;
];

#Ifnot; ! TARGET_GLULX

[ string_to_array val arr arrlen    str oldstr len;
	oldstr = glk($0048); ! stream_get_current
	str = glk($0043, arr, arrlen, 1, 0); ! stream_open_memory
	if (str == 0) return 0;

	glk($0047, str); ! stream_set_current

	if (val->0 == $c0 or $c1)
		val();
	else
		@streamstr val;

	glk($0047, oldstr); ! stream_set_current
	@copy $ffffffff sp;
	@copy str sp;
	@glk $0044 2 0; ! stream_close
	@copy sp len;
	@copy sp 0;

	return len;
];

#Endif; ! TARGET_

[ check_str str1 str2  len1 len2 ix good ch;
	good = true;
	len1 = string_to_array(str1, bigbuffer1, BIGBUFSIZE);
	len2 = string_to_array(str2, bigbuffer2, BIGBUFSIZE);
	if (len1 ~= len2) {
		good = false;
	}
	else {
		for (ix=0 : ix<len1 : ix++) {
			if (bigbuffer1->ix ~= bigbuffer2->ix)
				good = false;
		}
	}
	print "~";
	for (ix=0 : ix<len1 : ix++) {
		ch = bigbuffer1->ix;
		print (char) ch;
	}
	print "~ len ", len1;
	if (~~good) {
		failures++;
		print " (should be ~";
		for (ix=0 : ix<len2 : ix++) {
			ch = bigbuffer2->ix;
			print (char) ch;
		}
		print "~ len ", len2, ", FAIL)";
	}
];

Constant one_const 1;
Constant two_const 2;
Constant thr33_const 3;
Constant aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 10;
Constant altone_const one_const;
Constant twenty_const 10+10;

[ RunTest;
	string 0 "zero";
	string 1 "one";
	string 2 "two";
	string 3 "three";
	string 10 "ten";
	string 20 "twenty";

	check_str("A: @01", "A: one");
	new_line;
	
	check_str("B: @(1) @(010) @(003)", "B: one ten three");
	new_line;
	
	check_str("C: @(one_const)@(thr33_const)@(two_const)", "C: onethreetwo");
	new_line;

	check_str("D: @10@(ONE_CONST)@(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)", "D: tenoneten");
	new_line;

	string 1 "ONE";
	check_str("E: @(altone_const) @(twenty_const)", "E: ONE twenty");
	new_line;

	#ifdef TARGET_GLULX;
	string 101 "one-oh-one";
	check_str("F: @(101)", "F: one-oh-one");
	new_line;
	#endif;

	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];

#ifdef BADSYNTAX;

Object obj;

[ badfunc;
	! Each of these lines generate a "must contain a symbol" error.
	
	print "@()";

	print "@(xyz!one)";

	print "@(hello";

	print "@(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)";

	! Each of these lines generate a "expected a known constant value" error.
	
	print "@(unknown_const)";

	print "@(forward_const)";

	print "@(RunTest)";

	print "@(obj)";

];

Constant forward_const 0;

#endif;
