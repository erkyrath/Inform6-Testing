Constant Story "EscapeDoubleAtTest";
Constant Headline "Not a game.^";

Release 1;

! This is a compiler unit test for the classic "@@NN" escape.

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

[ Main loc;
    #Ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;
    #Endif; ! TARGET_

	loc = 0;

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #ifnot;
    print "Game file format ", 0->0, ".^";
    #Endif; ! TARGET_GLULX
];

Array arr --> '@@64' '@@94' '@@126' '@@233' '@^A';
Array arr2 --> "@@64@@94@@126@@228@^a";

[ RunTest ix val;
	print "str at is @@64.^";
	print "str caret is @@94.^";
	print "str tilde is @@126.^";
	print "str a-umlaut is @:a.^";
	print "str e-accent is @'e.^";
	print "a bunch of these is @@064@@0064@:a@'e.^";

	val = '@@94';
	print "char caret is ", (char) val, ".^";

	val = 'a@@64';
	print "word a-at is ", (address) val, ".^";
	val = 'b@:ux';
	print "word b-u-umlaut-x is ", (address) val, ".^";

	print "arr-->(0..4): ";
	for (ix=0 : ix<5 : ix++) {
		val = arr-->ix;
		print (char) val;
	}
	print ".^";

	print "arr2-->(0..4): ";
	for (ix=0 : ix<5 : ix++) {
		val = arr2-->ix;
		print (char) val;
	}
	print ".^";

	#ifdef BAD_NO_DIGITS;
	print "err: no digits is @@.^";
	#endif;
];

