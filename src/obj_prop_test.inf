Constant Story "ObjPropTest";
Constant Headline "Not a game.^";

Release 1;

! This is a compiler unit test for how properties work, particularly with
! the :: operator.

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

Global failures;

[ Main loc;
    #Ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;
    #Endif; ! TARGET_

	loc = 0;

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #ifnot;
    print "Game file format ", 0->0, ".^";
    #Endif; ! TARGET_GLULX
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		failures++;
		print " (ERROR, should be ", val2, ")";
	}
];

[ RunTest;
	SimpleObjTest();
	BaseClassTest();
	
	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];

Property genprop;
Property additive addprop;

class Foo
  with indprop 11,
  with addprop 77;

class Foofoo
  class Foo
  with indprop 111,
  with genprop 222,
  with addprop 777;

class Wooz
  with indprop 101 102,
  with genprop 103 104;

class Bar
  with indprop 22,
  with genprop 33;

class Mum
  with genprop 44,
  with addprop 55 66;

class Qux
  with addprop 88 99;

Object obj1
  class Foo,
  class Bar;

Object obj2
  class Bar,
  class Foo;

Object obj3
  class Bar,
  class Foo,
  with indprop 4,
  with genprop 4;

Bar obj4
  with indprop 5;

Bar obj5
  class Foo,
  with indprop 6;

Bar obj5a
  with indprop 7,
  class Foo;

Bar obj6
  class Foo;

Foo obj7
  class Bar;

Object obj8
  class Mum,
  class Bar;

Object obj8a
  class Mum Bar;

Qux obj9
  with addprop 2;

Object obj10
  class Foo,
  class Qux;

Foofoo obj11;

Object obj12
  class Foofoo,
  class Bar;

Object obj12a
  class Foofoo Bar;

Object obj13
  class Bar,
  class Foofoo;

Object obj13a
  class Bar Foofoo;

Wooz obj14
  with indprop 4,
  with genprop 5;

[ SimpleObjTest;
	print "obj1.indprop: "; check_value(obj1.indprop, 11); print "^";
	print "obj2.indprop: "; check_value(obj2.indprop, 22); print "^";
	print "obj3.indprop: "; check_value(obj3.indprop, 4); print "^";
	print "obj4.indprop: "; check_value(obj4.indprop, 5); print "^";
	print "obj5.indprop: "; check_value(obj5.indprop, 6); print "^";
	print "obj5a.indprop: "; check_value(obj5a.indprop, 7); print "^";
	print "obj6.indprop: "; check_value(obj6.indprop, 22); print "^";
	print "obj7.indprop: "; check_value(obj7.indprop, 11); print "^";
	print "obj11.indprop: "; check_value(obj11.indprop, 111); print "^";
	print "obj12.indprop: "; check_value(obj12.indprop, 111); print "^";
	print "obj12a.indprop: "; check_value(obj12a.indprop, 111); print "^";
	print "obj13.indprop: "; check_value(obj13.indprop, 22); print "^";
	print "obj13a.indprop: "; check_value(obj13a.indprop, 22); print "^";
	
	print "obj3.genprop: "; check_value(obj3.genprop, 4); print "^";
	print "obj6.genprop: "; check_value(obj6.genprop, 33); print "^";
	print "obj7.genprop: "; check_value(obj7.genprop, 33); print "^";
	print "obj8.genprop: "; check_value(obj8.genprop, 44); print "^";
	print "obj8a.genprop: "; check_value(obj8a.genprop, 44); print "^";

	print "obj8.#addprop: "; check_value(obj8.#addprop, WORDSIZE*2); print "^";
	print "obj8.addprop[0]: "; check_value(obj8.&addprop-->0, 55); print "^";
	print "obj8.addprop[1]: "; check_value(obj8.&addprop-->1, 66); print "^";
	
	print "obj9.#addprop: "; check_value(obj9.#addprop, WORDSIZE*3); print "^";
	print "obj9.addprop[0]: "; check_value(obj9.&addprop-->0, 2); print "^";
	print "obj9.addprop[1]: "; check_value(obj9.&addprop-->1, 88); print "^";
	print "obj9.addprop[2]: "; check_value(obj9.&addprop-->2, 99); print "^";
	
	print "obj10.#addprop: "; check_value(obj10.#addprop, WORDSIZE*3); print "^";
	print "obj10.addprop[0]: "; check_value(obj10.&addprop-->0, 77); print "^";
	print "obj10.addprop[1]: "; check_value(obj10.&addprop-->1, 88); print "^";
	print "obj10.addprop[2]: "; check_value(obj10.&addprop-->2, 99); print "^";
	
	print "obj11.#addprop: "; check_value(obj11.#addprop, WORDSIZE*2); print "^";
	print "obj11.addprop[0]: "; check_value(obj11.&addprop-->0, 777); print "^";
	print "obj11.addprop[1]: "; check_value(obj11.&addprop-->1, 77); print "^";

	print "obj14.indprop: "; check_value(obj14.indprop, 4); print "^";
	print "obj14.genprop: "; check_value(obj14.genprop, 5); print "^";
	print "obj14.#indprop: "; check_value(obj14.#indprop, WORDSIZE); print "^";
	print "obj14.#genprop: "; check_value(obj14.#genprop, WORDSIZE); print "^";

	new_line;
];

[ BaseClassTest;
	print "obj1.Foo::indprop: "; check_value(obj1.Foo::indprop, 11); print "^";
	print "obj1.Bar::indprop: "; check_value(obj1.Bar::indprop, 22); print "^";
	print "obj1.Foo::addprop: "; check_value(obj1.Foo::addprop, 77); print "^";
	print "obj1.Bar::genprop: "; check_value(obj1.Bar::genprop, 33); print "^";

	print "obj1.#Foo::indprop: "; check_value(obj1.#Foo::indprop, WORDSIZE); print "^";
	print "obj1.#Bar::indprop: "; check_value(obj1.#Bar::indprop, WORDSIZE); print "^";
	print "obj1.#Foo::addprop: "; check_value(obj1.#Foo::addprop, WORDSIZE); print "^";
	print "obj1.#Bar::genprop: "; check_value(obj1.#Bar::genprop, WORDSIZE); print "^";

	print "obj3.Foo::indprop: "; check_value(obj3.Foo::indprop, 11); print "^";
	print "obj3.Bar::indprop: "; check_value(obj3.Bar::indprop, 22); print "^";
	print "obj3.Foo::addprop: "; check_value(obj3.Foo::addprop, 77); print "^";
	print "obj3.Bar::genprop: "; check_value(obj3.Bar::genprop, 33); print "^";

	print "obj3.#Foo::indprop: "; check_value(obj3.#Foo::indprop, WORDSIZE); print "^";
	print "obj3.#Bar::indprop: "; check_value(obj3.#Bar::indprop, WORDSIZE); print "^";
	print "obj3.#Foo::addprop: "; check_value(obj3.#Foo::addprop, WORDSIZE); print "^";
	print "obj3.#Bar::genprop: "; check_value(obj3.#Bar::genprop, WORDSIZE); print "^";

	print "obj9.#Qux::addprop: "; check_value(obj9.#Qux::addprop, WORDSIZE*2); print "^";
	print "obj9.Qux::addprop[0]: "; check_value(obj9.&Qux::addprop-->0, 88); print "^";
	print "obj9.Qux::addprop[1]: "; check_value(obj9.&Qux::addprop-->1, 99); print "^";

	print "obj10.#Foo::addprop: "; check_value(obj10.#Foo::addprop, WORDSIZE); print "^";
	print "obj10.Foo::addprop[0]: "; check_value(obj10.&Foo::addprop-->0, 77); print "^";
	print "obj10.#Qux::addprop: "; check_value(obj10.#Qux::addprop, WORDSIZE*2); print "^";
	print "obj10.Qux::addprop[0]: "; check_value(obj10.&Qux::addprop-->0, 88); print "^";
	print "obj10.Qux::addprop[1]: "; check_value(obj10.&Qux::addprop-->1, 99); print "^";

	print "obj14.#Wooz::indprop: "; check_value(obj14.#Wooz::indprop, WORDSIZE*2); print "^";
	print "obj14.Wooz::indprop[0]: "; check_value(obj14.&Wooz::indprop-->0, 101); print "^";
	print "obj14.Wooz::indprop[1]: "; check_value(obj14.&Wooz::indprop-->1, 102); print "^";
	print "obj14.#Wooz::genprop: "; check_value(obj14.#Wooz::genprop, WORDSIZE*2); print "^";
	print "obj14.Wooz::genprop[0]: "; check_value(obj14.&Wooz::genprop-->0, 103); print "^";
	print "obj14.Wooz::genprop[1]: "; check_value(obj14.&Wooz::genprop-->1, 104); print "^";
];
