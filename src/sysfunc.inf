Constant Story "SysFuncTest";
Constant Headline "Not a game.^";

Release 1;

! A compiler unit test for rarely-used built-in functions.

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

Global failures;

[ Main loc;
    #Ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;
    #Endif; ! TARGET_

	loc = 0;

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #ifnot;
    print "Game file format ", 0->0, ".^";
    #Endif; ! TARGET_GLULX
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		failures++;
		print " (ERROR, should be ", val2, ")";
	}
];

Object room;
Object -> troll;
Object -> chest;
Object -> -> jewel;
Object -> player;
Object -> -> lamp;
Object -> -> sword;

[ RunTest val;
	print "room=", room, ", ";
	print "troll=", troll, ", ";
	print "chest=", chest, ", ";
	print "jewel=", jewel, ", ";
	print "player=", player, ", ";
	print "lamp=", lamp, ", ";
	print "sword=", sword, "^";

	val = parent(troll);
	print "parent(troll): "; check_value(val, room); new_line;
	val = parent(chest);
	print "parent(chest): "; check_value(val, room); new_line;
	val = parent(lamp);
	print "parent(lamp): "; check_value(val, player); new_line;
	val = child(room);
	print "child(room): "; check_value(val, troll); new_line;
	val = eldest(room);
	print "eldest(room): "; check_value(val, troll); new_line;
	val = child(player);
	print "child(player): "; check_value(val, lamp); new_line;
	val = sibling(troll);
	print "sibling(troll): "; check_value(val, chest); new_line;
	val = younger(chest);
	print "younger(chest): "; check_value(val, player); new_line;
	val = sibling(player);
	print "sibling(player): "; check_value(val, nothing); new_line;
	val = children(room);
	print "children(room): "; check_value(val, 3); new_line;
	val = children(player);
	print "children(player): "; check_value(val, 2); new_line;
	val = children(sword);
	print "children(sword): "; check_value(val, 0); new_line;
	val = youngest(room);
	print "youngest(room): "; check_value(val, player); new_line;
	val = youngest(chest);
	print "youngest(chest): "; check_value(val, jewel); new_line;
	val = youngest(lamp);
	print "youngest(lamp): "; check_value(val, nothing); new_line;
	val = elder(sword);
	print "elder(sword): "; check_value(val, lamp); new_line;
	val = elder(lamp);
	print "elder(lamp): "; check_value(val, nothing); new_line;
	val = elder(player);
	print "elder(player): "; check_value(val, chest); new_line;
	val = elder(chest);
	print "elder(chest): "; check_value(val, troll); new_line;
	val = elder(room);
	print "elder(room): "; check_value(val, nothing); new_line;
	
	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];

