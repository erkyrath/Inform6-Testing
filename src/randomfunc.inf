Constant Story "RandomFuncTest";
Constant Headline "Not a game.^";

Release 1;

! This is a compiler unit test for the random() function.
! (Not the @random opcode! That's a different layer.)

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

Global failures;

[ Main loc;
    #Ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;
    #Endif; ! TARGET_

	loc = 0;

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #ifnot;
    print "Game file format ", 0->0, ".^";
    #Endif; ! TARGET_GLULX
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		failures++;
		print " (ERROR, should be ", val2, ")";
	}
];

[ RunTest;
	TestRanges();
	TestDeterm();
	
	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];

Global minval;
Global maxval;

[ TestRanges val;
	randomrange(1);
	print "randomrange(1): minval="; check_value(minval, 1);
	print ", maxval="; check_value(maxval, 1); print "^";

	randomrange(2);
	print "randomrange(2): minval="; check_value(minval, 1);
	print ", maxval="; check_value(maxval, 2); print "^";

	randomrange(4);
	print "randomrange(4): minval="; check_value(minval, 1);
	print ", maxval="; check_value(maxval, 4); print "^";

	randomrange3();
	print "randomrange3(): minval="; check_value(minval, 1);
	print ", maxval="; check_value(maxval, 3); print "^";

	randommultiarg();
	print "randommultiarg(): minval="; check_value(minval, 5);
	print ", maxval="; check_value(maxval, 11); print "^";

	! "true" randomness
	val = random(0);
	print "random(0)="; check_value(val, 0); print "^";

	randomrange(4);
	print "randomrange(4): minval="; check_value(minval, 1);
	print ", maxval="; check_value(maxval, 4); print "^";

	randomrange3();
	print "randomrange3(): minval="; check_value(minval, 1);
	print ", maxval="; check_value(maxval, 3); print "^";

	! deterministic "randomness"
	val = random(-10);
	print "random(-10)="; check_value(val, 0); print "^";

	randomrange(4);
	print "randomrange(4): minval="; check_value(minval, 1);
	print ", maxval="; check_value(maxval, 4); print "^";

	randomrange3();
	print "randomrange3(): minval="; check_value(minval, 1);
	print ", maxval="; check_value(maxval, 3); print "^";

];

! Because of random numbers, there is a tiny chance that one of these
! range tests will fail even if nothing is wrong. Run it again to be
! sure.

[ randomrange arg val ix;
	maxval = -9999;
	minval = 9999;

	for (ix=0 : ix < 100 : ix++) {
		val = random(arg);
		if (maxval < val) maxval = val;
		if (minval > val) minval = val;
	}
];

[ randomrange3 val ix;
	maxval = -9999;
	minval = 9999;

	for (ix=0 : ix < 100 : ix++) {
		val = random(3);
		if (maxval < val) maxval = val;
		if (minval > val) minval = val;
	}
];

[ randommultiarg val ix;
	maxval = -9999;
	minval = 9999;

	for (ix=0 : ix < 100 : ix++) {
		val = random(5, 7, 9, 11);
		if (maxval < val) maxval = val;
		if (minval > val) minval = val;
		if (val % 2 == 0) {
			print "(ERROR, even number)";
			failures++;
		}
	}
];

Constant SIZE = 16;

Array run1 --> SIZE;
Array run2 --> SIZE;

[ TestDeterm ix val;
	random(-5);
	for (ix=0 : ix<SIZE : ix++) {
		run1-->ix = random(100);
	}

	#ifdef TARGET_ZCODE;

	@random -5 val;
	for (ix=0 : ix<SIZE : ix++) {
		@random 100 val;
		run2-->ix = val;
	}

	#ifnot; ! TARGET_GLULX;
	
	@setrandom 5;
	for (ix=0 : ix<SIZE : ix++) {
		@random 100 val;
		run2-->ix = val + 1;
	}

	#endif;

	for (ix=0 : ix<SIZE : ix++) {
		print ix, "="; check_value(run1-->ix, run2-->ix); print ", ";
		if (run1-->ix < 1 || run1-->ix > 100) {
			print "(ERROR, out of range)";
			failures++;
		}
	}
	new_line;
];
