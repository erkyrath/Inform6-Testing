Constant Story "BranchReduceTest";
Constant Headline "Not a game.^";

Release 1;

! This is a compiler unit test for condensing branch opcodes.

#ifdef TARGET_ZCODE;
Constant HDR_GAMERELEASE      = $02;     ! word
Constant HDR_GAMESERIAL       = $12;     ! six ASCII characters
#ifnot;
Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters
#endif; ! TARGET_GLULX

Global failures;

[ Main loc;
    #Ifdef TARGET_GLULX;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;
    #Endif; ! TARGET_

	loc = 0;

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #ifnot;
    print "Game file format ", 0->0, ".^";
    #Endif; ! TARGET_GLULX
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		failures++;
		print " (ERROR, should be ", val2, ")";
	}
];

[ RunTest val;
	val = func_jz_false(0);
	print "jz_false(0): "; check_value(val, 0);
	print "; ";
	val = func_jz_false(1);
	print "jz_false(1): "; check_value(val, 10);
	print ".^";
	val = func_jz_true(0);
	print "jz_true(0): "; check_value(val, 1);
	print "; ";
	val = func_jz_true(1);
	print "jz_true(1): "; check_value(val, 11);
	print ".^";
	val = func_jz_two(0);
	print "jz_two(0): "; check_value(val, 2);
	print "; ";
	val = func_jz_two(1);
	print "jz_two(1): "; check_value(val, 12);
	print ".^";
	
	val = func_jl_false(0);
	print "jl_false(0): "; check_value(val, 0);
	print "; ";
	val = func_jl_false(-1);
	print "jl_false(-1): "; check_value(val, 13);
	print ".^";
	val = func_jl_true(0);
	print "jl_true(0): "; check_value(val, 1);
	print "; ";
	val = func_jl_true(-1);
	print "jl_true(-1): "; check_value(val, 14);
	print ".^";
	val = func_jl_two(0);
	print "jl_two(0): "; check_value(val, 2);
	print "; ";
	val = func_jl_two(-1);
	print "jl_two(-1): "; check_value(val, 15);
	print ".^";
	
	val = func_jg_false(1);
	print "jg_false(1): "; check_value(val, 0);
	print "; ";
	val = func_jg_false(0);
	print "jg_false(0): "; check_value(val, 16);
	print ".^";
	val = func_jg_true(1);
	print "jg_true(1): "; check_value(val, 1);
	print "; ";
	val = func_jg_true(0);
	print "jg_true(0): "; check_value(val, 17);
	print ".^";
	val = func_jg_two(1);
	print "jg_two(1): "; check_value(val, 2);
	print "; ";
	val = func_jg_two(0);
	print "jg_two(0): "; check_value(val, 18);
	print ".^";
	
	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];


[ func_jz_false arg;
	if (arg) {
		return 10;
	}
	rfalse;
];

[ func_jz_true arg;
	if (arg) {
		return 11;
	}
	rtrue;
];

[ func_jz_two arg;
	if (arg) {
		return 12;
	}
	return 2;
];


[ func_jl_false arg;
	if (arg < 0) {
		return 13;
	}
	rfalse;
];

[ func_jl_true arg;
	if (arg < 0) {
		return 14;
	}
	rtrue;
];

[ func_jl_two arg;
	if (arg < 0) {
		return 15;
	}
	return 2;
];


[ func_jg_false arg;
	if (arg <= 0) {
		return 16;
	}
	rfalse;
];

[ func_jg_true arg;
	if (arg <= 0) {
		return 17;
	}
	rtrue;
];

[ func_jg_two arg;
	if (arg <= 0) {
		return 18;
	}
	return 2;
];
