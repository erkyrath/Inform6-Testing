Constant Story "DictLargeEntryTest";
Constant Headline "Not a game.^";

! Test that the value of #dict_par1/2/3 match the compilation options.
! (Glulx only.)

Release 1;

Global gg_mainwin;
Constant HDR_GLULXVERSION  $04;     ! long word
Constant ROM_GAMERELEASE   $34;     ! short word
Constant ROM_GAMESERIAL    $36;     ! six ASCII characters

Global failures;

[ Main loc;
	@setiosys 2 0;
	@push 201; @push 3; @push 0; @push 0; @push 0;
	@glk $0023 5 gg_mainwin;

	@push gg_mainwin;
	@glk $002F 1 loc;

	loc = 0;

	Banner();
	new_line;
	RunTest();
];

[ Banner  ix;
    if (Story ~= 0) {
        #ifdef TARGET_ZCODE;
        #ifV5; style bold; #Endif;
        print (string) Story;
        #ifV5; style roman; #Endif;
        #ifnot; ! TARGET_GLULX;
        glk($0086, 3); ! set header style
        print (string) Story;
        glk($0086, 0); ! set normal style
        #Endif; ! TARGET_
    }
    if (Headline ~= 0) print ": ", (string) Headline;
    #ifdef TARGET_ZCODE;
    print "Release ", (HDR_GAMERELEASE-->0) & $03ff, " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) HDR_GAMESERIAL->ix;
    #ifnot; ! TARGET_GLULX;
    print "Release ";
    @aloads ROM_GAMERELEASE 0 ix;
    print ix;
    print " / Serial number ";
    for (ix=0 : ix<6 : ix++) print (char) ROM_GAMESERIAL->ix;
    #Endif; ! TARGET_
    print " / Inform v"; inversion;
    print ", compiler options ";
    ix = false;
    #ifdef STRICT_MODE;
    print "S"; ix++;
    #Endif; ! STRICT_MODE
    #ifdef INFIX;
    print "X"; ix++;
    #ifnot;
    #ifdef DEBUG;
    print "D"; ix++;
    #Endif; ! DEBUG
    #Endif; ! INFIX
    if (~~ix) print "(none)";
    new_line;

    #ifdef TARGET_GLULX;
    @gestalt 1 0 ix;
    print "Interpreter version ", ix / $10000, ".", (ix & $FF00) / $100,
    ".", ix & $FF, " / ";
    @gestalt 0 0 ix;
    print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, " / ";
    ix = HDR_GLULXVERSION-->0;
    print "game file format ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF, "^";
    #ifnot;
    print "Game file format ", 0->0, ".^";
    #Endif; ! TARGET_GLULX
];

[ check_value val1 val2;
	print val1;
	if (val1 ~= val2) {
		failures++;
		print " (ERROR, should be ", val2, ")";
	}
];

[ RunTest val;
	val = 'one';
	val = 'two';
	val = 'three';
	val = 'coins//p';
	showdict();

	if (DICT_CHAR_SIZE == 1)
		val = 2;
	else
		val = 0;
		
	new_line;
	print "#dict_par1: ";
	check_value(#dict_par1, DICT_ENTRY_BYTES-7+val);
	new_line;
	print "#dict_par2: ";
	check_value(#dict_par2, DICT_ENTRY_BYTES-5+val);
	new_line;
	print "#dict_par3: ";
	check_value(#dict_par3, DICT_ENTRY_BYTES-3+val);
	new_line;

	val = 'three';
	print "'three' flags: ";
	check_value(val->#dict_par1, 128);
	new_line;
	val = 'coins';
	print "'coins' flags: ";
	check_value(val->#dict_par1, 132);
	new_line;
	
	new_line;
	if (failures == 0)
		print "All passed.^";
	else
		print failures, " errors!^";
];

[ showdict dictlen entrylen j wd;
	print "DICT_WORD_SIZE=", DICT_WORD_SIZE, ", DICT_ENTRY_BYTES=", DICT_ENTRY_BYTES, "^";
    dictlen = #dictionary_table-->0;
    entrylen = DICT_ENTRY_BYTES;
    for (j=0 : j<dictlen : j++) {
        wd = #dictionary_table + WORDSIZE + entrylen*j;
        print wd, ": '", (address) wd, "' flags=", wd->#dict_par1, "/", wd->#dict_par2, "/", wd->#dict_par3;
		new_line;
    }
];
